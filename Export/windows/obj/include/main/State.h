// Generated by Haxe 4.3.6
#ifndef INCLUDED_main_State
#define INCLUDED_main_State

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(main,State)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)

namespace main{


class HXCPP_CLASS_ATTRIBUTES State_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef State_obj OBJ_;
		State_obj();

	public:
		enum { _hx_ClassId = 0x3a603158 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="main.State")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"main.State"); }
		static ::hx::ObjectPtr< State_obj > __new();
		static ::hx::ObjectPtr< State_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~State_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("State",f1,e5,38,17); }

		virtual void create();
		::Dynamic create_dyn();

		void tryUpdate( ::openfl::events::Event event);
		::Dynamic tryUpdate_dyn();

		void tryDestroy( ::openfl::events::Event event);
		::Dynamic tryDestroy_dyn();

		virtual void update(Float elapsed);
		::Dynamic update_dyn();

		void destroy();
		::Dynamic destroy_dyn();

		void add( ::openfl::display::DisplayObject basic);
		::Dynamic add_dyn();

};

} // end namespace main

#endif /* INCLUDED_main_State */ 
