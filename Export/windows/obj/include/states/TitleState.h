// Generated by Haxe 4.3.6
#ifndef INCLUDED_states_TitleState
#define INCLUDED_states_TitleState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_main_game_music_MusicBeatState
#include <main/game/music/MusicBeatState.h>
#endif
HX_DECLARE_CLASS1(main,State)
HX_DECLARE_CLASS3(main,game,music,MusicBeatState)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS1(states,TitleState)

namespace states{


class HXCPP_CLASS_ATTRIBUTES TitleState_obj : public  ::main::game::music::MusicBeatState_obj
{
	public:
		typedef  ::main::game::music::MusicBeatState_obj super;
		typedef TitleState_obj OBJ_;
		TitleState_obj();

	public:
		enum { _hx_ClassId = 0x1b9a519f };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="states.TitleState")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"states.TitleState"); }
		static ::hx::ObjectPtr< TitleState_obj > __new();
		static ::hx::ObjectPtr< TitleState_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~TitleState_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("TitleState",79,8d,a1,8c); }

		 ::openfl::display::Sprite sprite;
		void create();

		void update(Float elapsed);

};

} // end namespace states

#endif /* INCLUDED_states_TitleState */ 
