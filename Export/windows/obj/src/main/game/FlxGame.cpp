// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_main_FlxG
#include <main/FlxG.h>
#endif
#ifndef INCLUDED_main_State
#include <main/State.h>
#endif
#ifndef INCLUDED_main_game_FlxGame
#include <main/game/FlxGame.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_dabcad04be5ace31_12_new,"main.game.FlxGame","new",0xfb35cdaf,"main.game.FlxGame.new","main/game/FlxGame.hx",12,0x9e225101)
HX_LOCAL_STACK_FRAME(_hx_pos_dabcad04be5ace31_22_set_nextState,"main.game.FlxGame","set_nextState",0x847d9c10,"main.game.FlxGame.set_nextState","main/game/FlxGame.hx",22,0x9e225101)
namespace main{
namespace game{

void FlxGame_obj::__construct( ::main::State state,::hx::Null< Float >  __o_fps){
            		Float fps = __o_fps.Default(60);
            	HX_STACKFRAME(&_hx_pos_dabcad04be5ace31_12_new)
HXLINE(  13)		super::__construct();
HXLINE(  15)		::main::game::FlxGame_obj::set_nextState(state);
HXLINE(  16)		::openfl::Lib_obj::get_current()->stage->set_frameRate(fps);
            	}

Dynamic FlxGame_obj::__CreateEmpty() { return new FlxGame_obj; }

void *FlxGame_obj::_hx_vtable = 0;

Dynamic FlxGame_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxGame_obj > _hx_result = new FlxGame_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool FlxGame_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0c89e854) {
		if (inClassId<=(int)0x05f25ad9) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x05f25ad9;
		} else {
			return inClassId==(int)0x0c89e854;
		}
	} else {
		return inClassId==(int)0x6b353933;
	}
}

 ::main::State FlxGame_obj::nextState;

 ::main::State FlxGame_obj::set_nextState( ::main::State value){
            	HX_STACKFRAME(&_hx_pos_dabcad04be5ace31_22_set_nextState)
HXLINE(  23)		if (::hx::IsNotNull( ::main::FlxG_obj::state )) {
HXLINE(  25)			::main::game::FlxGame_obj::nextState->destroy();
            		}
HXLINE(  27)		::main::FlxG_obj::state = null();
HXLINE(  28)		::main::FlxG_obj::state = value;
HXLINE(  29)		::main::FlxG_obj::state->create();
HXLINE(  32)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxGame_obj,set_nextState,return )


::hx::ObjectPtr< FlxGame_obj > FlxGame_obj::__new( ::main::State state,::hx::Null< Float >  __o_fps) {
	::hx::ObjectPtr< FlxGame_obj > __this = new FlxGame_obj();
	__this->__construct(state,__o_fps);
	return __this;
}

::hx::ObjectPtr< FlxGame_obj > FlxGame_obj::__alloc(::hx::Ctx *_hx_ctx, ::main::State state,::hx::Null< Float >  __o_fps) {
	FlxGame_obj *__this = (FlxGame_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxGame_obj), true, "main.game.FlxGame"));
	*(void **)__this = FlxGame_obj::_hx_vtable;
	__this->__construct(state,__o_fps);
	return __this;
}

FlxGame_obj::FlxGame_obj()
{
}

bool FlxGame_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"nextState") ) { outValue = ( nextState ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"set_nextState") ) { outValue = set_nextState_dyn(); return true; }
	}
	return false;
}

bool FlxGame_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"nextState") ) { if (inCallProp == ::hx::paccAlways)  ioValue = ( set_nextState(ioValue.Cast<  ::main::State >()) ); else nextState=ioValue.Cast<  ::main::State >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *FlxGame_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo FlxGame_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::main::State */ ,(void *) &FlxGame_obj::nextState,HX_("nextState",1e,90,50,2b)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void FlxGame_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxGame_obj::nextState,"nextState");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxGame_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxGame_obj::nextState,"nextState");
};

#endif

::hx::Class FlxGame_obj::__mClass;

static ::String FlxGame_obj_sStaticFields[] = {
	HX_("nextState",1e,90,50,2b),
	HX_("set_nextState",01,46,ba,31),
	::String(null())
};

void FlxGame_obj::__register()
{
	FlxGame_obj _hx_dummy;
	FlxGame_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("main.game.FlxGame",3d,ca,5b,02);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxGame_obj::__GetStatic;
	__mClass->mSetStaticField = &FlxGame_obj::__SetStatic;
	__mClass->mMarkFunc = FlxGame_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlxGame_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< FlxGame_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxGame_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxGame_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxGame_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace main
} // end namespace game
