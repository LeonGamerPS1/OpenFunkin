// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_main_State
#include <main/State.h>
#endif
#ifndef INCLUDED_main_game_music_Conductor
#include <main/game/music/Conductor.h>
#endif
#ifndef INCLUDED_main_game_music_MusicBeatState
#include <main/game/music/MusicBeatState.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_835aba33b1630fe8_3_new,"main.game.music.MusicBeatState","new",0x0de4c098,"main.game.music.MusicBeatState.new","main/game/music/MusicBeatState.hx",3,0xd9767857)
HX_LOCAL_STACK_FRAME(_hx_pos_835aba33b1630fe8_24_create,"main.game.music.MusicBeatState","create",0x10b869c4,"main.game.music.MusicBeatState.create","main/game/music/MusicBeatState.hx",24,0xd9767857)
HX_LOCAL_STACK_FRAME(_hx_pos_835aba33b1630fe8_28_update,"main.game.music.MusicBeatState","update",0x1bae88d1,"main.game.music.MusicBeatState.update","main/game/music/MusicBeatState.hx",28,0xd9767857)
HX_LOCAL_STACK_FRAME(_hx_pos_835aba33b1630fe8_42_everyStep,"main.game.music.MusicBeatState","everyStep",0x476e32bf,"main.game.music.MusicBeatState.everyStep","main/game/music/MusicBeatState.hx",42,0xd9767857)
HX_LOCAL_STACK_FRAME(_hx_pos_835aba33b1630fe8_54_updateCurStep,"main.game.music.MusicBeatState","updateCurStep",0xd9a4241b,"main.game.music.MusicBeatState.updateCurStep","main/game/music/MusicBeatState.hx",54,0xd9767857)
HX_LOCAL_STACK_FRAME(_hx_pos_835aba33b1630fe8_58_stepHit,"main.game.music.MusicBeatState","stepHit",0x007b1a9f,"main.game.music.MusicBeatState.stepHit","main/game/music/MusicBeatState.hx",58,0xd9767857)
HX_LOCAL_STACK_FRAME(_hx_pos_835aba33b1630fe8_67_beatHit,"main.game.music.MusicBeatState","beatHit",0xf33e56b5,"main.game.music.MusicBeatState.beatHit","main/game/music/MusicBeatState.hx",67,0xd9767857)
namespace main{
namespace game{
namespace music{

void MusicBeatState_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_835aba33b1630fe8_3_new)
HXLINE(  12)		this->curBeat = 0;
HXLINE(  11)		this->curStep = 0;
HXLINE(   9)		this->totalSteps = 0;
HXLINE(   8)		this->totalBeats = 0;
HXLINE(   6)		this->lastStep = ((Float)0);
HXLINE(   5)		this->lastBeat = ((Float)0);
HXLINE(   3)		super::__construct();
            	}

Dynamic MusicBeatState_obj::__CreateEmpty() { return new MusicBeatState_obj; }

void *MusicBeatState_obj::_hx_vtable = 0;

Dynamic MusicBeatState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MusicBeatState_obj > _hx_result = new MusicBeatState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MusicBeatState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x32100948) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x32100948;
	} else {
		return inClassId==(int)0x3a603158;
	}
}

void MusicBeatState_obj::create(){
            	HX_STACKFRAME(&_hx_pos_835aba33b1630fe8_24_create)
HXDLIN(  24)		this->super::create();
            	}


void MusicBeatState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_835aba33b1630fe8_28_update)
HXLINE(  29)		this->everyStep();
HXLINE(  31)		this->updateCurStep();
HXLINE(  32)		this->curBeat = ::Math_obj::round((( (Float)(this->curStep) ) / ( (Float)(4) )));
HXLINE(  34)		this->super::update(elapsed);
            	}


void MusicBeatState_obj::everyStep(){
            	HX_STACKFRAME(&_hx_pos_835aba33b1630fe8_42_everyStep)
HXDLIN(  42)		bool _hx_tmp;
HXDLIN(  42)		if (!((::main::game::music::Conductor_obj::songPosition > ((this->lastStep + ::main::game::music::Conductor_obj::stepCrochet) - ::main::game::music::Conductor_obj::safeZoneOffset)))) {
HXDLIN(  42)			_hx_tmp = (::main::game::music::Conductor_obj::songPosition < (this->lastStep + ::main::game::music::Conductor_obj::safeZoneOffset));
            		}
            		else {
HXDLIN(  42)			_hx_tmp = true;
            		}
HXDLIN(  42)		if (_hx_tmp) {
HXLINE(  45)			if ((::main::game::music::Conductor_obj::songPosition > (this->lastStep + ::main::game::music::Conductor_obj::stepCrochet))) {
HXLINE(  47)				this->stepHit();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MusicBeatState_obj,everyStep,(void))

void MusicBeatState_obj::updateCurStep(){
            	HX_STACKFRAME(&_hx_pos_835aba33b1630fe8_54_updateCurStep)
HXDLIN(  54)		this->curStep = ::Math_obj::floor((::main::game::music::Conductor_obj::songPosition / ::main::game::music::Conductor_obj::stepCrochet));
            	}


HX_DEFINE_DYNAMIC_FUNC0(MusicBeatState_obj,updateCurStep,(void))

void MusicBeatState_obj::stepHit(){
            	HX_STACKFRAME(&_hx_pos_835aba33b1630fe8_58_stepHit)
HXLINE(  59)		 ::main::game::music::MusicBeatState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  59)		_hx_tmp->totalSteps = (_hx_tmp->totalSteps + 1);
HXLINE(  60)		 ::main::game::music::MusicBeatState _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  60)		_hx_tmp1->lastStep = (_hx_tmp1->lastStep + ::main::game::music::Conductor_obj::stepCrochet);
HXLINE(  62)		if ((::hx::Mod(this->totalSteps,4) == 0)) {
HXLINE(  63)			this->beatHit();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MusicBeatState_obj,stepHit,(void))

void MusicBeatState_obj::beatHit(){
            	HX_STACKFRAME(&_hx_pos_835aba33b1630fe8_67_beatHit)
HXLINE(  68)		 ::main::game::music::MusicBeatState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  68)		_hx_tmp->lastBeat = (_hx_tmp->lastBeat + ::main::game::music::Conductor_obj::crochet);
HXLINE(  69)		 ::main::game::music::MusicBeatState _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  69)		_hx_tmp1->totalBeats = (_hx_tmp1->totalBeats + 1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(MusicBeatState_obj,beatHit,(void))


::hx::ObjectPtr< MusicBeatState_obj > MusicBeatState_obj::__new() {
	::hx::ObjectPtr< MusicBeatState_obj > __this = new MusicBeatState_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< MusicBeatState_obj > MusicBeatState_obj::__alloc(::hx::Ctx *_hx_ctx) {
	MusicBeatState_obj *__this = (MusicBeatState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MusicBeatState_obj), false, "main.game.music.MusicBeatState"));
	*(void **)__this = MusicBeatState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

MusicBeatState_obj::MusicBeatState_obj()
{
}

::hx::Val MusicBeatState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curStep") ) { return ::hx::Val( curStep ); }
		if (HX_FIELD_EQ(inName,"curBeat") ) { return ::hx::Val( curBeat ); }
		if (HX_FIELD_EQ(inName,"stepHit") ) { return ::hx::Val( stepHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"beatHit") ) { return ::hx::Val( beatHit_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"lastBeat") ) { return ::hx::Val( lastBeat ); }
		if (HX_FIELD_EQ(inName,"lastStep") ) { return ::hx::Val( lastStep ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"everyStep") ) { return ::hx::Val( everyStep_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"totalBeats") ) { return ::hx::Val( totalBeats ); }
		if (HX_FIELD_EQ(inName,"totalSteps") ) { return ::hx::Val( totalSteps ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"updateCurStep") ) { return ::hx::Val( updateCurStep_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val MusicBeatState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"curStep") ) { curStep=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curBeat") ) { curBeat=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"lastBeat") ) { lastBeat=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastStep") ) { lastStep=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"totalBeats") ) { totalBeats=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"totalSteps") ) { totalSteps=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MusicBeatState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("lastBeat",ec,fa,5c,d4));
	outFields->push(HX_("lastStep",c2,00,a5,df));
	outFields->push(HX_("totalBeats",d9,5b,f2,b6));
	outFields->push(HX_("totalSteps",43,71,af,8a));
	outFields->push(HX_("curStep",ec,58,71,b7));
	outFields->push(HX_("curBeat",16,53,29,ac));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MusicBeatState_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(MusicBeatState_obj,lastBeat),HX_("lastBeat",ec,fa,5c,d4)},
	{::hx::fsFloat,(int)offsetof(MusicBeatState_obj,lastStep),HX_("lastStep",c2,00,a5,df)},
	{::hx::fsInt,(int)offsetof(MusicBeatState_obj,totalBeats),HX_("totalBeats",d9,5b,f2,b6)},
	{::hx::fsInt,(int)offsetof(MusicBeatState_obj,totalSteps),HX_("totalSteps",43,71,af,8a)},
	{::hx::fsInt,(int)offsetof(MusicBeatState_obj,curStep),HX_("curStep",ec,58,71,b7)},
	{::hx::fsInt,(int)offsetof(MusicBeatState_obj,curBeat),HX_("curBeat",16,53,29,ac)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *MusicBeatState_obj_sStaticStorageInfo = 0;
#endif

static ::String MusicBeatState_obj_sMemberFields[] = {
	HX_("lastBeat",ec,fa,5c,d4),
	HX_("lastStep",c2,00,a5,df),
	HX_("totalBeats",d9,5b,f2,b6),
	HX_("totalSteps",43,71,af,8a),
	HX_("curStep",ec,58,71,b7),
	HX_("curBeat",16,53,29,ac),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("everyStep",87,48,d7,75),
	HX_("updateCurStep",e3,bd,df,82),
	HX_("stepHit",67,ae,41,81),
	HX_("beatHit",7d,ea,04,74),
	::String(null()) };

::hx::Class MusicBeatState_obj::__mClass;

void MusicBeatState_obj::__register()
{
	MusicBeatState_obj _hx_dummy;
	MusicBeatState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("main.game.music.MusicBeatState",a6,d4,aa,ca);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MusicBeatState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MusicBeatState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MusicBeatState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MusicBeatState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace main
} // end namespace game
} // end namespace music
