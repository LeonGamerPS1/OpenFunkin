// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_main_game_music_Conductor
#include <main/game/music/Conductor.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9bb4d206b74baa51_16_new,"main.game.music.Conductor","new",0xefe4c909,"main.game.music.Conductor.new","main/game/music/Conductor.hx",16,0x86775c68)
HX_LOCAL_STACK_FRAME(_hx_pos_9bb4d206b74baa51_20_changeBPM,"main.game.music.Conductor","changeBPM",0x583eacb8,"main.game.music.Conductor.changeBPM","main/game/music/Conductor.hx",20,0x86775c68)
HX_LOCAL_STACK_FRAME(_hx_pos_9bb4d206b74baa51_5_boot,"main.game.music.Conductor","boot",0xf0641f69,"main.game.music.Conductor.boot","main/game/music/Conductor.hx",5,0x86775c68)
HX_LOCAL_STACK_FRAME(_hx_pos_9bb4d206b74baa51_6_boot,"main.game.music.Conductor","boot",0xf0641f69,"main.game.music.Conductor.boot","main/game/music/Conductor.hx",6,0x86775c68)
HX_LOCAL_STACK_FRAME(_hx_pos_9bb4d206b74baa51_7_boot,"main.game.music.Conductor","boot",0xf0641f69,"main.game.music.Conductor.boot","main/game/music/Conductor.hx",7,0x86775c68)
HX_LOCAL_STACK_FRAME(_hx_pos_9bb4d206b74baa51_10_boot,"main.game.music.Conductor","boot",0xf0641f69,"main.game.music.Conductor.boot","main/game/music/Conductor.hx",10,0x86775c68)
HX_LOCAL_STACK_FRAME(_hx_pos_9bb4d206b74baa51_12_boot,"main.game.music.Conductor","boot",0xf0641f69,"main.game.music.Conductor.boot","main/game/music/Conductor.hx",12,0x86775c68)
HX_LOCAL_STACK_FRAME(_hx_pos_9bb4d206b74baa51_13_boot,"main.game.music.Conductor","boot",0xf0641f69,"main.game.music.Conductor.boot","main/game/music/Conductor.hx",13,0x86775c68)
namespace main{
namespace game{
namespace music{

void Conductor_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_9bb4d206b74baa51_16_new)
            	}

Dynamic Conductor_obj::__CreateEmpty() { return new Conductor_obj; }

void *Conductor_obj::_hx_vtable = 0;

Dynamic Conductor_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Conductor_obj > _hx_result = new Conductor_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Conductor_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x11c42fd1;
}

int Conductor_obj::bpm;

Float Conductor_obj::crochet;

Float Conductor_obj::stepCrochet;

Float Conductor_obj::songPosition;

Float Conductor_obj::lastSongPos;

Float Conductor_obj::offset;

int Conductor_obj::safeFrames;

Float Conductor_obj::safeZoneOffset;

void Conductor_obj::changeBPM(int newBpm){
            	HX_STACKFRAME(&_hx_pos_9bb4d206b74baa51_20_changeBPM)
HXLINE(  21)		::main::game::music::Conductor_obj::bpm = newBpm;
HXLINE(  23)		::main::game::music::Conductor_obj::crochet = ((( (Float)(60) ) / ( (Float)(::main::game::music::Conductor_obj::bpm) )) * ( (Float)(1000) ));
HXLINE(  24)		::main::game::music::Conductor_obj::stepCrochet = (::main::game::music::Conductor_obj::crochet / ( (Float)(4) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Conductor_obj,changeBPM,(void))


Conductor_obj::Conductor_obj()
{
}

bool Conductor_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"bpm") ) { outValue = ( bpm ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"offset") ) { outValue = ( offset ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"crochet") ) { outValue = ( crochet ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"changeBPM") ) { outValue = changeBPM_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"safeFrames") ) { outValue = ( safeFrames ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"stepCrochet") ) { outValue = ( stepCrochet ); return true; }
		if (HX_FIELD_EQ(inName,"lastSongPos") ) { outValue = ( lastSongPos ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"songPosition") ) { outValue = ( songPosition ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"safeZoneOffset") ) { outValue = ( safeZoneOffset ); return true; }
	}
	return false;
}

bool Conductor_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"bpm") ) { bpm=ioValue.Cast< int >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"offset") ) { offset=ioValue.Cast< Float >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"crochet") ) { crochet=ioValue.Cast< Float >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"safeFrames") ) { safeFrames=ioValue.Cast< int >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"stepCrochet") ) { stepCrochet=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"lastSongPos") ) { lastSongPos=ioValue.Cast< Float >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"songPosition") ) { songPosition=ioValue.Cast< Float >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"safeZoneOffset") ) { safeZoneOffset=ioValue.Cast< Float >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Conductor_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Conductor_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &Conductor_obj::bpm,HX_("bpm",df,be,4a,00)},
	{::hx::fsFloat,(void *) &Conductor_obj::crochet,HX_("crochet",34,d5,b5,d4)},
	{::hx::fsFloat,(void *) &Conductor_obj::stepCrochet,HX_("stepCrochet",48,d7,ff,e6)},
	{::hx::fsFloat,(void *) &Conductor_obj::songPosition,HX_("songPosition",9e,dd,3b,8d)},
	{::hx::fsFloat,(void *) &Conductor_obj::lastSongPos,HX_("lastSongPos",09,f9,d2,5e)},
	{::hx::fsFloat,(void *) &Conductor_obj::offset,HX_("offset",93,97,3f,60)},
	{::hx::fsInt,(void *) &Conductor_obj::safeFrames,HX_("safeFrames",d3,18,18,62)},
	{::hx::fsFloat,(void *) &Conductor_obj::safeZoneOffset,HX_("safeZoneOffset",8c,9a,25,8d)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Conductor_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Conductor_obj::bpm,"bpm");
	HX_MARK_MEMBER_NAME(Conductor_obj::crochet,"crochet");
	HX_MARK_MEMBER_NAME(Conductor_obj::stepCrochet,"stepCrochet");
	HX_MARK_MEMBER_NAME(Conductor_obj::songPosition,"songPosition");
	HX_MARK_MEMBER_NAME(Conductor_obj::lastSongPos,"lastSongPos");
	HX_MARK_MEMBER_NAME(Conductor_obj::offset,"offset");
	HX_MARK_MEMBER_NAME(Conductor_obj::safeFrames,"safeFrames");
	HX_MARK_MEMBER_NAME(Conductor_obj::safeZoneOffset,"safeZoneOffset");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Conductor_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Conductor_obj::bpm,"bpm");
	HX_VISIT_MEMBER_NAME(Conductor_obj::crochet,"crochet");
	HX_VISIT_MEMBER_NAME(Conductor_obj::stepCrochet,"stepCrochet");
	HX_VISIT_MEMBER_NAME(Conductor_obj::songPosition,"songPosition");
	HX_VISIT_MEMBER_NAME(Conductor_obj::lastSongPos,"lastSongPos");
	HX_VISIT_MEMBER_NAME(Conductor_obj::offset,"offset");
	HX_VISIT_MEMBER_NAME(Conductor_obj::safeFrames,"safeFrames");
	HX_VISIT_MEMBER_NAME(Conductor_obj::safeZoneOffset,"safeZoneOffset");
};

#endif

::hx::Class Conductor_obj::__mClass;

static ::String Conductor_obj_sStaticFields[] = {
	HX_("bpm",df,be,4a,00),
	HX_("crochet",34,d5,b5,d4),
	HX_("stepCrochet",48,d7,ff,e6),
	HX_("songPosition",9e,dd,3b,8d),
	HX_("lastSongPos",09,f9,d2,5e),
	HX_("offset",93,97,3f,60),
	HX_("safeFrames",d3,18,18,62),
	HX_("safeZoneOffset",8c,9a,25,8d),
	HX_("changeBPM",4f,4f,f8,1d),
	::String(null())
};

void Conductor_obj::__register()
{
	Conductor_obj _hx_dummy;
	Conductor_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("main.game.music.Conductor",97,90,9f,f0);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Conductor_obj::__GetStatic;
	__mClass->mSetStaticField = &Conductor_obj::__SetStatic;
	__mClass->mMarkFunc = Conductor_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Conductor_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Conductor_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Conductor_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Conductor_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Conductor_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Conductor_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_9bb4d206b74baa51_5_boot)
HXDLIN(   5)		bpm = 100;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9bb4d206b74baa51_6_boot)
HXDLIN(   6)		crochet = ((( (Float)(60) ) / ( (Float)(::main::game::music::Conductor_obj::bpm) )) * ( (Float)(1000) ));
            	}
{
            	HX_STACKFRAME(&_hx_pos_9bb4d206b74baa51_7_boot)
HXDLIN(   7)		stepCrochet = (::main::game::music::Conductor_obj::crochet / ( (Float)(4) ));
            	}
{
            	HX_STACKFRAME(&_hx_pos_9bb4d206b74baa51_10_boot)
HXDLIN(  10)		offset = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_9bb4d206b74baa51_12_boot)
HXDLIN(  12)		safeFrames = 10;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9bb4d206b74baa51_13_boot)
HXDLIN(  13)		safeZoneOffset = ((( (Float)(::main::game::music::Conductor_obj::safeFrames) ) / ( (Float)(60) )) * ( (Float)(1000) ));
            	}
}

} // end namespace main
} // end namespace game
} // end namespace music
