// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_main_FlxG
#include <main/FlxG.h>
#endif
#ifndef INCLUDED_main_State
#include <main/State.h>
#endif
#ifndef INCLUDED_main_game_FlxGame
#include <main/game/FlxGame.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_c73ec8a2f4bcef53_16_switchState,"main.FlxG","switchState",0xa61ff519,"main.FlxG.switchState","main/FlxG.hx",16,0xa9e20313)
HX_LOCAL_STACK_FRAME(_hx_pos_c73ec8a2f4bcef53_12_boot,"main.FlxG","boot",0xa46efb16,"main.FlxG.boot","main/FlxG.hx",12,0xa9e20313)
namespace main{

void FlxG_obj::__construct() { }

Dynamic FlxG_obj::__CreateEmpty() { return new FlxG_obj; }

void *FlxG_obj::_hx_vtable = 0;

Dynamic FlxG_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxG_obj > _hx_result = new FlxG_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxG_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3c93b092;
}

 ::main::State FlxG_obj::state;

 ::openfl::display::DisplayObject FlxG_obj::stage;

Float FlxG_obj::elapsed;

void FlxG_obj::switchState( ::main::State state){
            	HX_STACKFRAME(&_hx_pos_c73ec8a2f4bcef53_16_switchState)
HXDLIN(  16)		::main::game::FlxGame_obj::set_nextState(state);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxG_obj,switchState,(void))


FlxG_obj::FlxG_obj()
{
}

bool FlxG_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"state") ) { outValue = ( state ); return true; }
		if (HX_FIELD_EQ(inName,"stage") ) { outValue = ( stage ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"elapsed") ) { outValue = ( elapsed ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"switchState") ) { outValue = switchState_dyn(); return true; }
	}
	return false;
}

bool FlxG_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"state") ) { state=ioValue.Cast<  ::main::State >(); return true; }
		if (HX_FIELD_EQ(inName,"stage") ) { stage=ioValue.Cast<  ::openfl::display::DisplayObject >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"elapsed") ) { elapsed=ioValue.Cast< Float >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *FlxG_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo FlxG_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::main::State */ ,(void *) &FlxG_obj::state,HX_("state",11,76,0b,84)},
	{::hx::fsObject /*  ::openfl::display::DisplayObject */ ,(void *) &FlxG_obj::stage,HX_("stage",be,6a,0b,84)},
	{::hx::fsFloat,(void *) &FlxG_obj::elapsed,HX_("elapsed",3c,98,c0,ba)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void FlxG_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxG_obj::state,"state");
	HX_MARK_MEMBER_NAME(FlxG_obj::stage,"stage");
	HX_MARK_MEMBER_NAME(FlxG_obj::elapsed,"elapsed");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxG_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxG_obj::state,"state");
	HX_VISIT_MEMBER_NAME(FlxG_obj::stage,"stage");
	HX_VISIT_MEMBER_NAME(FlxG_obj::elapsed,"elapsed");
};

#endif

::hx::Class FlxG_obj::__mClass;

static ::String FlxG_obj_sStaticFields[] = {
	HX_("state",11,76,0b,84),
	HX_("stage",be,6a,0b,84),
	HX_("elapsed",3c,98,c0,ba),
	HX_("switchState",7d,07,8b,77),
	::String(null())
};

void FlxG_obj::__register()
{
	FlxG_obj _hx_dummy;
	FlxG_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("main.FlxG",0a,54,7c,31);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxG_obj::__GetStatic;
	__mClass->mSetStaticField = &FlxG_obj::__SetStatic;
	__mClass->mMarkFunc = FlxG_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlxG_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< FlxG_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxG_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxG_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxG_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxG_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_c73ec8a2f4bcef53_12_boot)
HXDLIN(  12)		elapsed = ((Float)0);
            	}
}

} // end namespace main
