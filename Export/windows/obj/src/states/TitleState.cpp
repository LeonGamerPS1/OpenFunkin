// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_main_State
#include <main/State.h>
#endif
#ifndef INCLUDED_main_game_music_Conductor
#include <main/game/music/Conductor.h>
#endif
#ifndef INCLUDED_main_game_music_MusicBeatState
#include <main/game/music/MusicBeatState.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_states_TitleState
#include <states/TitleState.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f4f54134d4f9e667_8_new,"states.TitleState","new",0x1a057497,"states.TitleState.new","states/TitleState.hx",8,0xa989be18)
HX_LOCAL_STACK_FRAME(_hx_pos_f4f54134d4f9e667_13_create,"states.TitleState","create",0x5256ff25,"states.TitleState.create","states/TitleState.hx",13,0xa989be18)
HX_LOCAL_STACK_FRAME(_hx_pos_f4f54134d4f9e667_19_update,"states.TitleState","update",0x5d4d1e32,"states.TitleState.update","states/TitleState.hx",19,0xa989be18)
namespace states{

void TitleState_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_f4f54134d4f9e667_8_new)
HXLINE(  10)		this->sprite =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE(   8)		super::__construct();
            	}

Dynamic TitleState_obj::__CreateEmpty() { return new TitleState_obj; }

void *TitleState_obj::_hx_vtable = 0;

Dynamic TitleState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TitleState_obj > _hx_result = new TitleState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TitleState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x32100948) {
		if (inClassId<=(int)0x1b9a519f) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x1b9a519f;
		} else {
			return inClassId==(int)0x32100948;
		}
	} else {
		return inClassId==(int)0x3a603158;
	}
}

void TitleState_obj::create(){
            	HX_STACKFRAME(&_hx_pos_f4f54134d4f9e667_13_create)
HXLINE(  14)		this->super::create();
HXLINE(  15)		::haxe::Log_obj::trace(::main::game::music::Conductor_obj::crochet,::hx::SourceInfo(HX_("source/states/TitleState.hx",0c,7f,4b,d4),15,HX_("states.TitleState",25,dd,c3,81),HX_("create",fc,66,0f,7c)));
            	}


void TitleState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_f4f54134d4f9e667_19_update)
HXLINE(  20)		this->super::update(elapsed);
HXLINE(  21)		::haxe::Log_obj::trace(this->curStep,::hx::SourceInfo(HX_("source/states/TitleState.hx",0c,7f,4b,d4),21,HX_("states.TitleState",25,dd,c3,81),HX_("update",09,86,05,87)));
HXLINE(  22)		::main::game::music::Conductor_obj::songPosition = ( (Float)(2000) );
            	}



::hx::ObjectPtr< TitleState_obj > TitleState_obj::__new() {
	::hx::ObjectPtr< TitleState_obj > __this = new TitleState_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< TitleState_obj > TitleState_obj::__alloc(::hx::Ctx *_hx_ctx) {
	TitleState_obj *__this = (TitleState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TitleState_obj), true, "states.TitleState"));
	*(void **)__this = TitleState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

TitleState_obj::TitleState_obj()
{
}

void TitleState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TitleState);
	HX_MARK_MEMBER_NAME(sprite,"sprite");
	HX_MARK_END_CLASS();
}

void TitleState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(sprite,"sprite");
}

::hx::Val TitleState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"sprite") ) { return ::hx::Val( sprite ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val TitleState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"sprite") ) { sprite=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TitleState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("sprite",05,dc,95,c3));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TitleState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(TitleState_obj,sprite),HX_("sprite",05,dc,95,c3)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *TitleState_obj_sStaticStorageInfo = 0;
#endif

static ::String TitleState_obj_sMemberFields[] = {
	HX_("sprite",05,dc,95,c3),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class TitleState_obj::__mClass;

void TitleState_obj::__register()
{
	TitleState_obj _hx_dummy;
	TitleState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.TitleState",25,dd,c3,81);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TitleState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TitleState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TitleState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TitleState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace states
